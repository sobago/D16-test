# 3. Имеется два списка разной длины. В первом содержатся ключи, а во втором — значения.
# Напишите функцию make_dict, которая создает словарь из этих ключей и значений.
# Если ключу не хватило значения, в словаре должно быть значение «None».
# Значения, которым не хватило ключей, следует игнорировать.

a = [1, 2, 3, 4, 5, 6]
b = ['a', 'b', 'c', 'd']


def make_dict(keys, values):
    dct = dict(zip(keys, values))
    for key in keys:
        try:
            dct[key]
        except KeyError:
            dct[key] = None
    return dct


# print(make_dict(a, b))


# 10. Напишите функцию, объединяющую два списка в список кортежей.
# Если в одном из списков элементов меньше, то в результирующем списке на месте отсутствующих элементов должны быть строки «N/A».
# Подсказка: эту функцию можно написать в одну строку.

c = [1, 2, 3, 4]
d = ['a', 'b', 'c']


def make_listtuple(list1, list2):
    lst = []
    for x in range(max(len(list1), len(list2))):
        try:
            a = list1[x]
        except IndexError:
            a = 'N/A'
        try:
            b = list2[x]
        except IndexError:
            b = 'N/A'
        lst.append(tuple((a, b)))
    return lst


# print(make_listtuple(c, d))


# 16. Команда программистов пишет на Django форум по текстовым ролевым играм, опираясь на основные идеологические принципы Django.
# В данный момент они думают, как реализовать логику сущности тем на форуме (топиков, тредов).
# Какой, по вашему мнению, функционал будет реализован в коде моделей, а какой — в коде представлений?

#хз



